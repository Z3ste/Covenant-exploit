require 'optparse'
require 'securerandom'
require 'openssl'
require 'base64'
require 'json'
def aes256_cbc_encrypt(key, data)
    key = Digest::SHA256.digest(key) if (key.kind_of?(String) && 32 != key.bytesize)
    iv = SecureRandom.random_bytes(16)
    iv = Digest::MD5.digest(iv) if (iv.kind_of?(String) && 16 != iv.bytesize)

    aes = OpenSSL::Cipher.new('AES-256-CBC')
    aes.encrypt
    aes.key = key
    aes.iv = iv
    ciphered = aes.update(data) + aes.final

    hmac = OpenSSL::Digest.new('sha256')
    signed = OpenSSL::HMAC.digest(hmac, key, ciphered)

    return([ciphered, iv, signed])
  end


options = {}
OptionParser.new do |opt|
    opt.on('--key KEY') { |o| options[:key] = o }
    opt.on('--guid GUID') { |o| options[:guid] = o }
end.parse!
message = '<RSAKeyValue><Modulus>tqwoOYfwOkdfax+Er6P3leoKE/w5wWYgmb/riTpSSWCA6T2JklWrPtf9z3s/k0wIi5pX3jWeC5RV5Y/E23jQXPfBB9jW95pIqxwhZ1wC2UOVA8eSCvqbTpqmvTuFPat8ek5piS/QQPSZG98vLsfJ2jQT6XywRZ5JgAZjaqmwUk/lhbUedizVAnYnVqcR4fPEJj2ZVPIzerzIFfGWQrSEbfnjp4F8Y6DjNSTburjFgP0YdXQ9S7qCJ983vM11LfyZiGf97/wFIzXf7pl7CsA8nmQP8t46h8b5hCikXl1waEQLEW+tHRIso+7nBv7ciJ5WgizSAYfXfePlw59xp4UMFQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>'

ciphered, iv, signed = aes256_cbc_encrypt(Base64.decode64(options[:key]), message)
data = {
  'GUID': "#{options[:guid]}",
  'Type': 0,
  'Meta': '',
  'IV': Base64.encode64(iv).strip,
  'EncryptedMessage': Base64.encode64(ciphered).gsub("\n", ''),
  'HMAC': Base64.encode64(signed).strip
}
puts Base64.urlsafe_encode64(data.to_json)